/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Whisper
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/Timer.ts
var Timer = class {
  constructor() {
    this.elapsedTime = 0;
    this.intervalId = null;
    this.onUpdate = null;
  }
  setOnUpdate(callback) {
    this.onUpdate = callback;
  }
  start() {
    this.intervalId = window.setInterval(() => {
      this.elapsedTime += 1e3;
      if (this.onUpdate) {
        this.onUpdate();
      }
    }, 1e3);
  }
  pause() {
    if (this.intervalId !== null) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      if (this.onUpdate) {
        this.onUpdate();
      }
    } else {
      this.intervalId = window.setInterval(() => {
        this.elapsedTime += 1e3;
        if (this.onUpdate) {
          this.onUpdate();
        }
      }, 1e3);
    }
  }
  reset() {
    this.elapsedTime = 0;
    if (this.intervalId !== null) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    if (this.onUpdate) {
      this.onUpdate();
    }
  }
  getFormattedTime() {
    const seconds = Math.floor(this.elapsedTime / 1e3) % 60;
    const minutes = Math.floor(this.elapsedTime / 1e3 / 60) % 60;
    const hours = Math.floor(this.elapsedTime / 1e3 / 60 / 60);
    const pad = (n) => n < 10 ? "0" + n : n;
    return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
  }
};

// src/Controls.ts
var import_obsidian = require("obsidian");

// src/StatusBar.ts
var StatusBar = class {
  constructor(plugin) {
    this.statusBarItem = null;
    this.status = "idle" /* Idle */;
    this.plugin = plugin;
    this.statusBarItem = this.plugin.addStatusBarItem();
    this.updateStatusBarItem();
  }
  updateStatus(status) {
    this.status = status;
    this.updateStatusBarItem();
  }
  updateStatusBarItem() {
    if (this.statusBarItem) {
      switch (this.status) {
        case "recording" /* Recording */:
          this.statusBarItem.textContent = "Recording...";
          this.statusBarItem.style.color = "red";
          break;
        case "processing" /* Processing */:
          this.statusBarItem.textContent = "Processing audio...";
          this.statusBarItem.style.color = "orange";
          break;
        case "idle" /* Idle */:
        default:
          this.statusBarItem.textContent = "Whisper Idle";
          this.statusBarItem.style.color = "green";
          break;
      }
    }
  }
  remove() {
    if (this.statusBarItem) {
      this.statusBarItem.remove();
    }
  }
};

// src/utils.ts
function getBaseFileName(filePath) {
  const fileName = filePath.substring(filePath.lastIndexOf("/") + 1);
  const baseFileName = fileName.substring(0, fileName.lastIndexOf("."));
  return baseFileName;
}
function generateTimestampedFileName(extension) {
  const now = /* @__PURE__ */ new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, "0");
  const day = String(now.getDate()).padStart(2, "0");
  const hours = String(now.getHours()).padStart(2, "0");
  const minutes = String(now.getMinutes()).padStart(2, "0");
  const dateStr = `${year}-${month}-${day}_${hours}-${minutes}`;
  return `${dateStr}${extension ? `.${extension}` : ""}`;
}

// src/Controls.ts
var Controls = class extends import_obsidian.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
    this.containerEl.addClass("recording-controls");
    this.timerDisplay = this.contentEl.createEl("div", { cls: "timer" });
    this.updateTimerDisplay();
    this.plugin.timer.setOnUpdate(() => {
      this.updateTimerDisplay();
    });
    const buttonGroupEl = this.contentEl.createEl("div", {
      cls: "button-group"
    });
    this.startButton = new import_obsidian.ButtonComponent(buttonGroupEl);
    this.startButton.setIcon("microphone").setButtonText(" Record").onClick(this.startRecording.bind(this)).buttonEl.addClass("button-component");
    this.pauseButton = new import_obsidian.ButtonComponent(buttonGroupEl);
    this.pauseButton.setIcon("pause").setButtonText(" Pause").onClick(this.pauseRecording.bind(this)).buttonEl.addClass("button-component");
    this.stopButton = new import_obsidian.ButtonComponent(buttonGroupEl);
    this.stopButton.setIcon("square").setButtonText(" Stop").onClick(this.stopRecording.bind(this)).buttonEl.addClass("button-component");
  }
  async startRecording() {
    console.log("start");
    this.plugin.statusBar.updateStatus("recording" /* Recording */);
    await this.plugin.recorder.startRecording();
    this.plugin.timer.start();
    this.resetGUI();
  }
  async pauseRecording() {
    console.log("pausing recording...");
    await this.plugin.recorder.pauseRecording();
    this.plugin.timer.pause();
    this.resetGUI();
  }
  async stopRecording() {
    var _a;
    console.log("stopping recording...");
    this.plugin.statusBar.updateStatus("processing" /* Processing */);
    const blob = await this.plugin.recorder.stopRecording();
    this.plugin.timer.reset();
    this.resetGUI();
    const extension = (_a = this.plugin.recorder.getMimeType()) == null ? void 0 : _a.split("/")[1];
    const fileName = generateTimestampedFileName(extension);
    await this.plugin.audioHandler.sendAudioData(blob, fileName);
    this.plugin.statusBar.updateStatus("idle" /* Idle */);
    this.close();
  }
  updateTimerDisplay() {
    this.timerDisplay.textContent = this.plugin.timer.getFormattedTime();
  }
  resetGUI() {
    const recorderState = this.plugin.recorder.getRecordingState();
    this.startButton.setDisabled(
      recorderState === "recording" || recorderState === "paused"
    );
    this.pauseButton.setDisabled(recorderState === "inactive");
    this.stopButton.setDisabled(recorderState === "inactive");
    this.pauseButton.setButtonText(
      recorderState === "paused" ? " Resume" : " Pause"
    );
  }
};

// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var ALPHA = "abcdefghijklmnopqrstuvwxyz";
var DIGIT = "0123456789";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/helpers/null.js
var null_default = null;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// node_modules/axios/lib/platform/browser/index.js
var isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
})();
var isStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  isStandardBrowserEnv,
  isStandardBrowserWebWorkerEnv,
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (browser_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": void 0
};
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: browser_default.classes.FormData,
    Blob: browser_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*"
    }
  }
};
utils_default.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.freezeMethods(AxiosHeaders.prototype);
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = browser_default.isStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        const cookie = [];
        cookie.push(name + "=" + encodeURIComponent(value));
        if (utils_default.isNumber(expires)) {
          cookie.push("expires=" + new Date(expires).toGMTString());
        }
        if (utils_default.isString(path)) {
          cookie.push("path=" + path);
        }
        if (utils_default.isString(domain)) {
          cookie.push("domain=" + domain);
        }
        if (secure === true) {
          cookie.push("secure");
        }
        document.cookie = cookie.join("; ");
      },
      read: function read(name) {
        const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove: function remove(name) {
        this.write(name, "", Date.now() - 864e5);
      }
    };
  }()
) : (
  // Non standard browser env (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv() {
    return {
      write: function write() {
      },
      read: function read() {
        return null;
      },
      remove: function remove() {
      }
    };
  }()
);

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv2() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url) {
      let href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  function nonStandardBrowserEnv2() {
    return function isURLSameOrigin() {
      return true;
    };
  }()
);

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();
    const responseType = config.responseType;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener("abort", onCanceled);
      }
    }
    if (utils_default.isFormData(requestData)) {
      if (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false);
      } else {
        requestHeaders.setContentType("multipart/form-data;", false);
      }
    }
    let request = new XMLHttpRequest();
    if (config.auth) {
      const username = config.auth.username || "";
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config.transitional || transitional_default;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    if (browser_default.isStandardBrowserEnv) {
      const xsrfValue = (config.withCredentials || isURLSameOrigin_default(fullPath)) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === "function") {
      request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
    }
    if (typeof config.onUploadProgress === "function" && request.upload) {
      request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new AxiosError_default(
          `Adapter ${nameOrAdapter} is not supported by the environment`,
          "ERR_NOT_SUPPORT"
        );
      }
      throw new Error(
        utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`
      );
    }
    if (!utils_default.isFunction(adapter)) {
      throw new TypeError("adapter is not a function");
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/env/data.js
var VERSION = "1.4.0";

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders;
    contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    contextHeaders && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  mergeConfig: mergeConfig2
} = axios_default;

// src/AudioHandler.ts
var import_obsidian2 = require("obsidian");
var AudioHandler = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async sendAudioData(blob, fileName) {
    var _a;
    const timestampedFileName = fileName;
    const baseFileName = getBaseFileName(timestampedFileName);
    let audioFilePath = `${this.plugin.settings.saveAudioFilePath ? `${this.plugin.settings.saveAudioFilePath}/` : ""}${timestampedFileName}`;
    let noteFilePath = `${this.plugin.settings.createNewFileAfterRecordingPath ? `${this.plugin.settings.createNewFileAfterRecordingPath}/` : ""}${baseFileName}.md`;
    if (this.plugin.settings.debugMode) {
      new import_obsidian2.Notice(`Sending audio data size: ${blob.size / 1e3} KB`);
    }
    if (!this.plugin.settings.whisperApiKey) {
      new import_obsidian2.Notice(
        "API key is missing. Please add your API key in the settings."
      );
      return;
    }
    const formData = new FormData();
    formData.append("file", blob, timestampedFileName);
    formData.append("model", this.plugin.settings.model);
    formData.append("language", this.plugin.settings.language);
    if (this.plugin.settings.prompt) {
      formData.append("prompt", this.plugin.settings.prompt);
    }
    try {
      if (this.plugin.settings.saveAudioFile) {
        const arrayBuffer = await blob.arrayBuffer();
        await this.plugin.app.vault.adapter.writeBinary(
          audioFilePath,
          new Uint8Array(arrayBuffer)
        );
        new import_obsidian2.Notice("Audio saved successfully.");
      }
    } catch (err) {
      console.error("Error saving audio file:", err);
      new import_obsidian2.Notice("Error saving audio file: " + err.message);
    }
    let finalText;
    let originalText;
    try {
      if (this.plugin.settings.debugMode) {
        new import_obsidian2.Notice("Parsing audio data:" + timestampedFileName);
      }
      const whisperResponse = await axios_default.post(
        this.plugin.settings.apiUrl,
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
            Authorization: `Bearer ${this.plugin.settings.whisperApiKey}`
          }
        }
      ).catch((error) => {
        if (error.response) {
          console.error("API Error Response:", {
            status: error.response.status,
            statusText: error.response.statusText,
            data: error.response.data
          });
          throw new Error(`API Error (${error.response.status}): ${JSON.stringify(error.response.data)}`);
        } else if (error.request) {
          console.error("No response received:", error.request);
          throw new Error("No response received from API");
        } else {
          console.error("Error setting up request:", error.message);
          throw error;
        }
      });
      originalText = whisperResponse.data.text;
      finalText = originalText;
      if (this.plugin.settings.usePostProcessing && this.plugin.settings.postProcessingModel) {
        if (this.plugin.settings.debugMode) {
          new import_obsidian2.Notice("Post-processing transcription...");
        }
        try {
          let postProcessResponse;
          const isAnthropicModel = this.plugin.settings.postProcessingModel.startsWith("claude");
          if (isAnthropicModel) {
            if (!this.plugin.settings.anthropicApiKey) {
              throw new Error("Anthropic API key is required for Claude models");
            }
            postProcessResponse = await axios_default.post(
              "https://api.anthropic.com/v1/messages",
              {
                model: this.plugin.settings.postProcessingModel,
                max_tokens: 8190,
                messages: [
                  {
                    role: "user",
                    content: this.plugin.settings.postProcessingPrompt + "\n\n" + finalText
                  }
                ]
              },
              {
                headers: {
                  "Content-Type": "application/json",
                  "x-api-key": this.plugin.settings.anthropicApiKey,
                  "anthropic-version": "2023-06-01",
                  "anthropic-dangerous-direct-browser-access": "true"
                }
              }
            );
            finalText = postProcessResponse.data.content[0].text;
          } else {
            postProcessResponse = await axios_default.post(
              "https://api.openai.com/v1/chat/completions",
              {
                model: this.plugin.settings.postProcessingModel,
                messages: [
                  {
                    role: "system",
                    content: this.plugin.settings.postProcessingPrompt
                  },
                  {
                    role: "user",
                    content: finalText
                  }
                ],
                temperature: 0.7
              },
              {
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${this.plugin.settings.openAiApiKey}`
                }
              }
            );
            finalText = postProcessResponse.data.choices[0].message.content.trim();
          }
          if (this.plugin.settings.debugMode) {
            new import_obsidian2.Notice("Post-processing complete.");
          }
        } catch (postErr) {
          console.error("Error during post-processing:", postErr);
          new import_obsidian2.Notice(
            "Error during post-processing: " + postErr.message
          );
        }
      }
      let finalTitle = null;
      if (this.plugin.settings.autoGenerateTitle && this.plugin.settings.titleGenerationPrompt) {
        if (this.plugin.settings.debugMode) {
          new import_obsidian2.Notice("Generating title...");
        }
        try {
          let titleResponse;
          const isAnthropicModel = this.plugin.settings.postProcessingModel.startsWith("claude");
          if (isAnthropicModel) {
            if (!this.plugin.settings.anthropicApiKey) {
              throw new Error("Anthropic API key is required for Claude models");
            }
            titleResponse = await axios_default.post(
              "https://api.anthropic.com/v1/messages",
              {
                model: this.plugin.settings.postProcessingModel,
                max_tokens: 1e3,
                messages: [
                  {
                    role: "user",
                    content: this.plugin.settings.titleGenerationPrompt + "\n\n" + finalText
                  }
                ]
              },
              {
                headers: {
                  "Content-Type": "application/json",
                  "x-api-key": this.plugin.settings.anthropicApiKey,
                  "anthropic-version": "2023-06-01",
                  "anthropic-dangerous-direct-browser-access": "true"
                }
              }
            );
            finalTitle = titleResponse.data.content[0].text;
          } else {
            titleResponse = await axios_default.post(
              "https://api.openai.com/v1/chat/completions",
              {
                model: this.plugin.settings.postProcessingModel || "gpt-4o",
                messages: [
                  {
                    role: "system",
                    content: this.plugin.settings.titleGenerationPrompt
                  },
                  {
                    role: "user",
                    content: finalText
                  }
                ],
                temperature: 0.7
              },
              {
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${this.plugin.settings.openAiApiKey}`
                }
              }
            );
            finalTitle = titleResponse.data.choices[0].message.content.trim();
          }
          if (this.plugin.settings.debugMode) {
            new import_obsidian2.Notice(`Title generated: ${finalTitle}`);
          }
          if (finalTitle) {
            finalTitle = finalTitle.replace(/[/\\?%*:|"<>]/g, "-").replace(/\n/g, " ").trim();
            const nowFileName = `${finalTitle} - ${timestampedFileName}`;
            const nowBaseFileName = getBaseFileName(nowFileName);
            audioFilePath = `${this.plugin.settings.saveAudioFilePath ? `${this.plugin.settings.saveAudioFilePath}/` : ""}${nowFileName}`;
            noteFilePath = `${this.plugin.settings.createNewFileAfterRecordingPath ? `${this.plugin.settings.createNewFileAfterRecordingPath}/` : ""}${nowBaseFileName}.md`;
            if (this.plugin.settings.saveAudioFile) {
              const oldAudioPath = `${this.plugin.settings.saveAudioFilePath ? `${this.plugin.settings.saveAudioFilePath}/` : ""}${timestampedFileName}`;
              await this.plugin.app.vault.adapter.rename(
                oldAudioPath,
                audioFilePath
              );
            }
          }
        } catch (titleErr) {
          console.error("Error generating title:", titleErr);
          new import_obsidian2.Notice("Error generating title: " + titleErr.message);
          finalTitle = null;
        }
      }
      const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      const shouldCreateNewFile = this.plugin.settings.createNewFileAfterRecording || !activeView;
      let noteContent = "";
      if (this.plugin.settings.autoGenerateTitle && finalTitle && finalTitle.trim() !== "") {
        noteContent = `![[${audioFilePath}]]
${finalText}`;
        if (this.plugin.settings.keepOriginalTranscription && finalText !== originalText) {
          noteContent += "\n\n## Original Dictation\n" + originalText;
        }
      } else {
        noteContent = `![[${audioFilePath}]]
${finalText}`;
        if (this.plugin.settings.keepOriginalTranscription && finalText !== originalText) {
          noteContent += "\n\n## Original Dictation\n" + originalText;
        }
      }
      if (shouldCreateNewFile) {
        await this.plugin.app.vault.create(noteFilePath, noteContent);
        await this.plugin.app.workspace.openLinkText(
          noteFilePath,
          "",
          true
        );
      } else {
        const editor = (_a = this.plugin.app.workspace.getActiveViewOfType(
          import_obsidian2.MarkdownView
        )) == null ? void 0 : _a.editor;
        if (editor) {
          const cursorPosition = editor.getCursor();
          editor.replaceRange(noteContent, cursorPosition);
          const noteLines = noteContent.split("\n");
          const newPosition = {
            line: cursorPosition.line + noteLines.length - 1,
            ch: noteLines[noteLines.length - 1].length
          };
          editor.setCursor(newPosition);
        }
      }
      new import_obsidian2.Notice("Audio parsed successfully.");
    } catch (err) {
      console.error("Error parsing audio:", err);
      new import_obsidian2.Notice("Error parsing audio: " + err.message);
    }
  }
};

// src/WhisperSettingsTab.ts
var import_obsidian3 = require("obsidian");
var WhisperSettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.settingsManager = plugin.settingsManager;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.containerEl.createEl("h2", { text: "API Keys" });
    this.createApiKeySettings();
    this.containerEl.createEl("h2", { text: "Whisper Settings" });
    this.createApiUrlSetting();
    this.createModelSetting();
    this.createPromptSetting();
    this.createLanguageSetting();
    this.createSaveAudioFileToggleSetting();
    this.createSaveAudioFilePathSetting();
    this.createNewFileToggleSetting();
    this.createNewFilePathSetting();
    this.createDebugModeToggleSetting();
    this.containerEl.createEl("h2", { text: "Post-processing Settings" });
    this.createPostProcessingSettings();
    this.createSilenceRemovalSettings();
  }
  getUniqueFolders() {
    const files = this.app.vault.getMarkdownFiles();
    const folderSet = /* @__PURE__ */ new Set();
    for (const file of files) {
      const parentFolder = file.parent;
      if (parentFolder && parentFolder instanceof import_obsidian3.TFolder) {
        folderSet.add(parentFolder);
      }
    }
    return Array.from(folderSet);
  }
  createTextSetting(name, desc, placeholder, value, onChange) {
    new import_obsidian3.Setting(this.containerEl).setName(name).setDesc(desc).addText(
      (text) => text.setPlaceholder(placeholder).setValue(value).onChange(async (value2) => await onChange(value2))
    );
  }
  createApiKeySettings() {
    this.createTextSetting(
      "Whisper API Key",
      "Enter your API key for Whisper transcription (This can be the same as your OpenAI API key, but could also be a key to the groq-API or Microsoft Azure.)",
      "sk-...xxxx",
      this.plugin.settings.whisperApiKey,
      async (value) => {
        this.plugin.settings.whisperApiKey = value;
        await this.settingsManager.saveSettings(this.plugin.settings);
      }
    );
    this.createTextSetting(
      "OpenAI API Key",
      "Enter your OpenAI API key to use GPT models",
      "sk-...xxxx",
      this.plugin.settings.openAiApiKey,
      async (value) => {
        this.plugin.settings.openAiApiKey = value;
        await this.settingsManager.saveSettings(this.plugin.settings);
      }
    );
    this.createTextSetting(
      "Anthropic API Key",
      "Enter your Anthropic API key for Claude models",
      "sk-ant-...",
      this.plugin.settings.anthropicApiKey,
      async (value) => {
        this.plugin.settings.anthropicApiKey = value;
        await this.settingsManager.saveSettings(this.plugin.settings);
      }
    );
  }
  createApiUrlSetting() {
    this.createTextSetting(
      "API URL",
      "Specify the endpoint that will be used to make requests to",
      "https://api.your-custom-url.com",
      this.plugin.settings.apiUrl,
      async (value) => {
        this.plugin.settings.apiUrl = value;
        await this.settingsManager.saveSettings(this.plugin.settings);
      }
    );
  }
  createModelSetting() {
    this.createTextSetting(
      "Model",
      "Specify the machine learning model to use for transcribing audio to text (whisper-1 for OpenAI, whisper-large-v3 for Groq)",
      "whisper-1",
      this.plugin.settings.model,
      async (value) => {
        this.plugin.settings.model = value;
        await this.settingsManager.saveSettings(this.plugin.settings);
      }
    );
  }
  createPromptSetting() {
    this.createTextSetting(
      "Prompt",
      "Optional: Add words with their correct spellings to help with transcription. Make sure it matches the chosen language.",
      "Example: ZyntriQix, Digique Plus, CynapseFive",
      this.plugin.settings.prompt,
      async (value) => {
        this.plugin.settings.prompt = value;
        await this.settingsManager.saveSettings(this.plugin.settings);
      }
    );
  }
  createLanguageSetting() {
    this.createTextSetting(
      "Language",
      "Specify the language of the message being whispered (e.g. en for English). This can be left blank for auto-detection with OpenAI, but has to be set when using Groq.",
      "en",
      this.plugin.settings.language,
      async (value) => {
        this.plugin.settings.language = value;
        await this.settingsManager.saveSettings(this.plugin.settings);
      }
    );
  }
  createSaveAudioFileToggleSetting() {
    new import_obsidian3.Setting(this.containerEl).setName("Save recording").setDesc(
      "Turn on to save the audio file after sending it to the Whisper API"
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.saveAudioFile).onChange(async (value) => {
        this.plugin.settings.saveAudioFile = value;
        if (!value) {
          this.plugin.settings.saveAudioFilePath = "";
        }
        await this.settingsManager.saveSettings(
          this.plugin.settings
        );
        this.saveAudioFileInput.setDisabled(!value);
      })
    );
  }
  createSaveAudioFilePathSetting() {
    this.saveAudioFileInput = new import_obsidian3.Setting(this.containerEl).setName("Recordings folder").setDesc(
      "Specify the path in the vault where to save the audio files"
    ).addText(
      (text) => text.setPlaceholder("Example: folder/audio").setValue(this.plugin.settings.saveAudioFilePath).onChange(async (value) => {
        this.plugin.settings.saveAudioFilePath = value;
        await this.settingsManager.saveSettings(
          this.plugin.settings
        );
      })
    ).setDisabled(!this.plugin.settings.saveAudioFile);
  }
  createNewFileToggleSetting() {
    new import_obsidian3.Setting(this.containerEl).setName("Save transcription").setDesc(
      "Turn on to create a new file for each recording, or leave off to add transcriptions at your cursor"
    ).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.createNewFileAfterRecording).onChange(async (value) => {
        this.plugin.settings.createNewFileAfterRecording = value;
        if (!value) {
          this.plugin.settings.createNewFileAfterRecordingPath = "";
        }
        await this.settingsManager.saveSettings(
          this.plugin.settings
        );
        this.createNewFileInput.setDisabled(!value);
      });
    });
  }
  createNewFilePathSetting() {
    this.createNewFileInput = new import_obsidian3.Setting(this.containerEl).setName("Transcriptions folder").setDesc(
      "Specify the path in the vault where to save the transcription files"
    ).addText((text) => {
      text.setPlaceholder("Example: folder/note").setValue(
        this.plugin.settings.createNewFileAfterRecordingPath
      ).onChange(async (value) => {
        this.plugin.settings.createNewFileAfterRecordingPath = value;
        await this.settingsManager.saveSettings(
          this.plugin.settings
        );
      });
    });
  }
  createDebugModeToggleSetting() {
    new import_obsidian3.Setting(this.containerEl).setName("Debug Mode").setDesc(
      "Turn on to increase the plugin's verbosity for troubleshooting."
    ).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
        this.plugin.settings.debugMode = value;
        await this.settingsManager.saveSettings(
          this.plugin.settings
        );
      });
    });
  }
  createPostProcessingSettings() {
    new import_obsidian3.Setting(this.containerEl).setName("Use Post-processing").setDesc("Turn on to post-process the transcribed text using GPT.").addToggle((toggle) => toggle.setValue(this.plugin.settings.usePostProcessing).onChange(async (value) => {
      this.plugin.settings.usePostProcessing = value;
      await this.settingsManager.saveSettings(this.plugin.settings);
    }));
    new import_obsidian3.Setting(this.containerEl).setName("Post-processing Prompt").setDesc("Enter the prompt that will be sent to the GPT model to polish the transcription.").addTextArea((textArea) => textArea.setPlaceholder("Enter your prompt here...").setValue(this.plugin.settings.postProcessingPrompt).onChange(async (value) => {
      this.plugin.settings.postProcessingPrompt = value;
      await this.settingsManager.saveSettings(this.plugin.settings);
    }));
    const models = [
      "gpt-4o",
      "gpt-4o-mini",
      "claude-3-5-sonnet-latest",
      "claude-3-5-haiku-latest",
      "claude-3-opus-latest"
    ];
    new import_obsidian3.Setting(this.containerEl).setName("Post-processing Model").setDesc("Select which AI model to use for post-processing.").addDropdown((dropdown) => {
      models.forEach((model) => dropdown.addOption(model, model));
      dropdown.setValue(this.plugin.settings.postProcessingModel);
      dropdown.onChange(async (value) => {
        this.plugin.settings.postProcessingModel = value;
        await this.settingsManager.saveSettings(this.plugin.settings);
      });
    });
    new import_obsidian3.Setting(this.containerEl).setName("Auto-generate Title").setDesc("Turn on to automatically generate a title for the transcribed text.").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoGenerateTitle).onChange(async (value) => {
      this.plugin.settings.autoGenerateTitle = value;
      await this.settingsManager.saveSettings(this.plugin.settings);
    }));
    new import_obsidian3.Setting(this.containerEl).setName("Title-generation Prompt").setDesc("The prompt used to generate a title from the transcribed text.").addTextArea((textArea) => textArea.setPlaceholder("Enter your title-generation prompt...").setValue(this.plugin.settings.titleGenerationPrompt).onChange(async (value) => {
      this.plugin.settings.titleGenerationPrompt = value;
      await this.settingsManager.saveSettings(this.plugin.settings);
    }));
    new import_obsidian3.Setting(this.containerEl).setName("Keep Original Transcription").setDesc("If enabled, adds the original Whisper transcription below the post-processed text.").addToggle((toggle) => toggle.setValue(this.plugin.settings.keepOriginalTranscription).onChange(async (value) => {
      this.plugin.settings.keepOriginalTranscription = value;
      await this.settingsManager.saveSettings(this.plugin.settings);
    }));
  }
  createSilenceRemovalSettings() {
    this.containerEl.createEl("h2", { text: "Silence Removal Settings" });
    new import_obsidian3.Setting(this.containerEl).setName("Remove Silence").setDesc("Remove silence from audio before processing").addToggle((toggle) => toggle.setValue(this.plugin.settings.useSilenceRemoval).onChange(async (value) => {
      this.plugin.settings.useSilenceRemoval = value;
      await this.settingsManager.saveSettings(this.plugin.settings);
    }));
    new import_obsidian3.Setting(this.containerEl).setName("Silence Threshold").setDesc("Sound level (in dB) below which audio is considered silence. Lower values are more aggressive (-50 is default)").addSlider((slider) => slider.setLimits(-70, -20, 5).setValue(this.plugin.settings.silenceThreshold).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.silenceThreshold = value;
      await this.settingsManager.saveSettings(this.plugin.settings);
    }));
    new import_obsidian3.Setting(this.containerEl).setName("Minimum Silence Duration").setDesc("Minimum duration (in seconds) of silence to remove").addSlider((slider) => slider.setLimits(0.1, 3, 0.1).setValue(this.plugin.settings.silenceDuration).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.silenceDuration = value;
      await this.settingsManager.saveSettings(this.plugin.settings);
    }));
    new import_obsidian3.Setting(this.containerEl).setName("Remove All Silence").setDesc("Remove all periods of silence that meet the threshold and duration criteria").addToggle((toggle) => toggle.setValue(this.plugin.settings.silenceRemoveAll).onChange(async (value) => {
      this.plugin.settings.silenceRemoveAll = value;
      await this.settingsManager.saveSettings(this.plugin.settings);
    }));
  }
};

// src/SettingsManager.ts
var DEFAULT_SETTINGS = {
  whisperApiKey: "",
  openAiApiKey: "",
  anthropicApiKey: "",
  apiUrl: "https://api.openai.com/v1/audio/transcriptions",
  model: "whisper-1",
  prompt: "",
  language: "en",
  saveAudioFile: true,
  saveAudioFilePath: "",
  debugMode: false,
  createNewFileAfterRecording: true,
  createNewFileAfterRecordingPath: "",
  // Set defaults for new settings
  usePostProcessing: true,
  postProcessingPrompt: "You are a perfect transcription program that is able to take faulty dictations and put them into a readable, grammatically correct form without changing their content or changing their specific formulations. It is important that you leave formulations as they are, and make no attempts to formalize or professionalize them. If the dictation is a todolist, write it as a todolist in markdown format. If there are repetions of content, choose the best (often last) one and make the sentence work with that. Just return the dictation, do not comment on it, or introduce it. Always transcribe in the language of the dictation. Here comes the dictation: \n\n",
  postProcessingModel: "gpt-4o",
  autoGenerateTitle: true,
  titleGenerationPrompt: "You are an intelligent bureaucratic assistant. You are tasked with generating a short (1-5 words), precise title for the TEXT below. Reply only with the title, nothing else. Generate the title in the main language of the TEXT. TEXT:",
  keepOriginalTranscription: false,
  // Default silence removal settings
  useSilenceRemoval: false,
  silenceThreshold: -50,
  silenceDuration: 1,
  silenceRemoveAll: true
};
var SettingsManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async loadSettings() {
    return Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.plugin.loadData()
    );
  }
  async saveSettings(settings) {
    await this.plugin.saveData(settings);
  }
};

// src/AudioRecorder.ts
var import_obsidian4 = require("obsidian");
var import_ffmpeg = require("@ffmpeg/ffmpeg");
function getSupportedMimeType() {
  const mimeTypes = ["audio/mp3", "audio/mp4", "audio/webm", "audio/ogg"];
  for (const mimeType of mimeTypes) {
    if (MediaRecorder.isTypeSupported(mimeType)) {
      return mimeType;
    }
  }
  return void 0;
}
var NativeAudioRecorder = class {
  constructor(plugin) {
    this.chunks = [];
    this.recorder = null;
    this.ffmpegLoaded = false;
    this.plugin = plugin;
    this.ffmpeg = (0, import_ffmpeg.createFFmpeg)({ log: false });
  }
  async loadFFmpeg() {
    if (!this.ffmpegLoaded) {
      await this.ffmpeg.load();
      this.ffmpegLoaded = true;
    }
  }
  async removeSilence(inputBlob) {
    if (!this.plugin.settings.useSilenceRemoval) {
      return inputBlob;
    }
    try {
      await this.loadFFmpeg();
      const inputBuffer = await inputBlob.arrayBuffer();
      this.ffmpeg.FS("writeFile", "input.mp3", new Uint8Array(inputBuffer));
      const silenceFilter = `silenceremove=stop_periods=${this.plugin.settings.silenceRemoveAll ? -1 : 1}:stop_duration=${this.plugin.settings.silenceDuration}:stop_threshold=${this.plugin.settings.silenceThreshold}dB`;
      await this.ffmpeg.run(
        "-i",
        "input.mp3",
        "-af",
        silenceFilter,
        "-acodec",
        "libmp3lame",
        "output.mp3"
      );
      const data = this.ffmpeg.FS("readFile", "output.mp3");
      this.ffmpeg.FS("unlink", "input.mp3");
      this.ffmpeg.FS("unlink", "output.mp3");
      return new Blob([data.buffer], { type: "audio/mp3" });
    } catch (error) {
      console.error("Error processing audio:", error);
      new import_obsidian4.Notice("Error processing audio: " + error);
      return inputBlob;
    }
  }
  getRecordingState() {
    var _a;
    return (_a = this.recorder) == null ? void 0 : _a.state;
  }
  getMimeType() {
    return this.mimeType;
  }
  async startRecording() {
    if (!this.recorder) {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          audio: true
        });
        this.mimeType = getSupportedMimeType();
        if (!this.mimeType) {
          throw new Error("No supported mimeType found");
        }
        const options = { mimeType: this.mimeType };
        const recorder = new MediaRecorder(stream, options);
        recorder.addEventListener("dataavailable", (e) => {
          console.log("dataavailable", e.data.size);
          this.chunks.push(e.data);
        });
        this.recorder = recorder;
      } catch (err) {
        new import_obsidian4.Notice("Error initializing recorder: " + err);
        console.error("Error initializing recorder:", err);
        return;
      }
    }
    this.recorder.start(100);
  }
  async pauseRecording() {
    if (!this.recorder) {
      return;
    }
    if (this.recorder.state === "recording") {
      this.recorder.pause();
    } else if (this.recorder.state === "paused") {
      this.recorder.resume();
    }
  }
  async stopRecording() {
    return new Promise((resolve) => {
      if (!this.recorder || this.recorder.state === "inactive") {
        const blob = new Blob(this.chunks, { type: this.mimeType });
        this.chunks.length = 0;
        this.removeSilence(blob).then(resolve);
      } else {
        this.recorder.addEventListener(
          "stop",
          async () => {
            const blob = new Blob(this.chunks, {
              type: this.mimeType
            });
            this.chunks.length = 0;
            if (this.recorder) {
              this.recorder.stream.getTracks().forEach((track) => track.stop());
              this.recorder = null;
            }
            const processedBlob = await this.removeSilence(blob);
            resolve(processedBlob);
          },
          { once: true }
        );
        this.recorder.stop();
      }
    });
  }
};

// main.ts
var Whisper = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.controls = null;
  }
  async onload() {
    this.settingsManager = new SettingsManager(this);
    this.settings = await this.settingsManager.loadSettings();
    this.addRibbonIcon("activity", "Open recording controls", (evt) => {
      if (!this.controls) {
        this.controls = new Controls(this);
      }
      this.controls.open();
    });
    this.addSettingTab(new WhisperSettingsTab(this.app, this));
    this.timer = new Timer();
    this.audioHandler = new AudioHandler(this);
    this.recorder = new NativeAudioRecorder(this);
    this.statusBar = new StatusBar(this);
    this.addCommands();
  }
  onunload() {
    if (this.controls) {
      this.controls.close();
    }
    this.statusBar.remove();
  }
  addCommands() {
    this.addCommand({
      id: "start-stop-recording",
      name: "Start/stop recording",
      callback: async () => {
        var _a;
        if (this.statusBar.status !== "recording" /* Recording */) {
          this.statusBar.updateStatus("recording" /* Recording */);
          await this.recorder.startRecording();
        } else {
          this.statusBar.updateStatus("processing" /* Processing */);
          const audioBlob = await this.recorder.stopRecording();
          const extension = (_a = this.recorder.getMimeType()) == null ? void 0 : _a.split("/")[1];
          const fileName = generateTimestampedFileName(extension);
          await this.audioHandler.sendAudioData(audioBlob, fileName);
          this.statusBar.updateStatus("idle" /* Idle */);
        }
      },
      hotkeys: [
        {
          modifiers: ["Alt"],
          key: "Q"
        }
      ]
    });
    this.addCommand({
      id: "upload-audio-file",
      name: "Upload audio file",
      callback: () => {
        const fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.accept = "audio/*";
        fileInput.onchange = async (event) => {
          const files = event.target.files;
          if (files && files.length > 0) {
            const file = files[0];
            const fileName = file.name;
            const audioBlob = file.slice(0, file.size, file.type);
            await this.audioHandler.sendAudioData(audioBlob, fileName);
          }
        };
        fileInput.click();
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
